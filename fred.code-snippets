{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"PSCustomObject": {
		"scope": "powershell",
		"prefix": "psc",
		"body": [
			"[PSCustomObject]@{",
			"    $0",
			"}"
		],
		"description": "Inserts a pscustomobject hashtable"
	},
	"StringType": {
		"scope": "powershell",
		"prefix": "[tring",
		"body": "[string",
		"description": "Fixing the bloody typo habit"
	},
	"PSSASuppressRule": {
		"scope": "powershell",
		"prefix": "sup",
		"body": "[Diagnostics.CodeAnalysis.SuppressMessageAttribute(\"PSUseShouldProcessForStateChangingFunctions\", \"\")]",
		"description": "Shut down that annoying pest"
	},
	"Param": {
		"scope": "powershell",
		"prefix": "param",
		"description": "Adds a param block",
		"body": [
			"[CmdletBinding()]",
			"param (",
			"    $0",
			")"
		]
	},
	"Function": {
		"scope": "powershell",
		"prefix": "fun",
		"description": "Adds a function definition",
		"body": [
			"function ${TM_FILENAME_BASE} {",
			"\t[CmdletBinding()]",
			"\tparam (",
			"\t\t$0",
			"\t)",
			"\tprocess {",
			"",
			"\t}",
			"}"
		]
	},
	"Help_EnableException": {
		"scope": "powershell",
		"prefix": "helpex",
		"description": "Adds CBH for the Parameter 'EnableException'",
		"body": [
			".PARAMETER EnableException",
			"\tThis parameters disables user-friendly warnings and enables the throwing of exceptions.",
			"\tThis is less user friendly, but allows catching exceptions in calling scripts."
		]
	},
	"Help_WhatIfConfirm": {
		"scope": "powershell",
		"prefix": "helpwi",
		"description": "Adds CBH for the Parameters 'WhatIf' & 'Confirm'",
		"body": [
			".PARAMETER WhatIf",
			"\tIf this switch is enabled, no actions are performed but informational messages will be displayed that explain what would happen if the command were to run.",
			"",
			".PARAMETER Confirm",
			"\tIf this switch is enabled, you will be prompted for confirmation before executing any operations that change state."
		]
	}
}